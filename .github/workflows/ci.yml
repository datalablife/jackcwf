name: CI - Continuous Integration

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
      - 'bugfix/**'
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '20'
  UV_VERSION: '0.9.2'
  FRONTEND_PORT: 3000
  BACKEND_PORT: 8000

jobs:
  # Job 1: Setup and cache dependencies
  setup:
    name: Setup Dependencies
    runs-on: ubuntu-latest

    outputs:
      uv-cache-hit: ${{ steps.uv-cache.outputs.cache-hit }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Verify uv installation
        run: uv --version

      - name: Cache uv dependencies
        id: uv-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml', '**/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Install Python dependencies
        if: steps.uv-cache.outputs.cache-hit != 'true'
        run: |
          uv sync --all-extras

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '.web/package-lock.json'

      - name: Cache Node modules
        uses: actions/cache@v4
        with:
          path: |
            .web/node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('.web/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

  # Job 2: Code linting and formatting
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    needs: setup

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml', '**/uv.lock') }}

      - name: Install dependencies with dev extras
        run: |
          uv sync --all-extras

      - name: Run Black (format check)
        run: |
          source .venv/bin/activate
          black --check --diff working/ tests/
        continue-on-error: false

      - name: Run isort (import sort check)
        run: |
          source .venv/bin/activate
          isort --check-only --diff working/ tests/
        continue-on-error: false

      - name: Run flake8 (style guide)
        run: |
          source .venv/bin/activate
          flake8 working/ tests/ --max-line-length=100 --extend-ignore=E203,W503
        continue-on-error: false

      - name: Run pylint (code analysis)
        run: |
          source .venv/bin/activate
          pylint working/ --max-line-length=100 --disable=C0111,R0903,W0212
        continue-on-error: true

  # Job 3: Type checking
  type-check:
    name: Type Checking
    runs-on: ubuntu-latest
    needs: setup

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml', '**/uv.lock') }}

      - name: Install dependencies with dev extras
        run: |
          uv sync --all-extras

      - name: Run mypy (type checking)
        run: |
          source .venv/bin/activate
          mypy working/ --config-file pyproject.toml
        continue-on-error: true

  # Job 4: Run tests with coverage
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: setup

    strategy:
      matrix:
        test-type: [unit, integration]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml', '**/uv.lock') }}

      - name: Install dependencies with test extras
        run: |
          uv sync --extra test

      - name: Wait for PostgreSQL
        run: |
          for i in {1..30}; do
            pg_isready -h localhost -p 5432 -U testuser && break
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Run ${{ matrix.test-type }} tests
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379
          TESTING: true
        run: |
          source .venv/bin/activate
          pytest tests/${{ matrix.test-type }}/ \
            --cov=working \
            --cov-report=xml \
            --cov-report=term-missing \
            --junitxml=test-results-${{ matrix.test-type }}.xml \
            -v

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          flags: ${{ matrix.test-type }}
          name: codecov-${{ matrix.test-type }}
          fail_ci_if_error: false

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test-type }}
          path: test-results-${{ matrix.test-type }}.xml

      - name: Archive coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.test-type }}
          path: coverage.xml

  # Job 5: Build Reflex application
  build:
    name: Build Reflex App
    runs-on: ubuntu-latest
    needs: [lint, type-check, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml', '**/uv.lock') }}

      - name: Install dependencies
        run: |
          uv sync

      - name: Initialize Reflex
        run: |
          source .venv/bin/activate
          reflex init --loglevel warning

      - name: Build Reflex application
        run: |
          source .venv/bin/activate
          reflex export --frontend-only --loglevel info
        timeout-minutes: 10

      - name: Check build artifacts
        run: |
          ls -la .web/
          if [ ! -d ".web/_static" ]; then
            echo "Error: Build artifacts not found"
            exit 1
          fi

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: reflex-build
          path: |
            .web/
            !.web/node_modules
          retention-days: 7

  # Job 6: Build summary and status check
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [lint, type-check, test, build]
    if: always()

    steps:
      - name: Check CI status
        run: |
          if [[ "${{ needs.lint.result }}" == "failure" ]] || \
             [[ "${{ needs.type-check.result }}" == "failure" ]] || \
             [[ "${{ needs.test.result }}" == "failure" ]] || \
             [[ "${{ needs.build.result }}" == "failure" ]]; then
            echo "❌ CI pipeline failed"
            echo "Lint: ${{ needs.lint.result }}"
            echo "Type Check: ${{ needs.type-check.result }}"
            echo "Test: ${{ needs.test.result }}"
            echo "Build: ${{ needs.build.result }}"
            exit 1
          else
            echo "✅ CI pipeline passed successfully"
          fi

      - name: Post CI summary
        run: |
          echo "## CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint | ${{ needs.lint.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Type Check | ${{ needs.type-check.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
