name: Pre-commit Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - 'feature/**'
      - 'bugfix/**'
      - 'hotfix/**'

env:
  PYTHON_VERSION: '3.12'

jobs:
  # Job 1: Fast validation checks
  quick-checks:
    name: Quick Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Check commit messages
        run: |
          echo "Checking commit message format..."
          # Get commits in this PR or push
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            COMMITS=$(git log --format=%s ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }})
          else
            COMMITS=$(git log --format=%s -1)
          fi

          echo "$COMMITS" | while read -r msg; do
            echo "Checking: $msg"
            # Check if commit message follows conventional commits
            if ! echo "$msg" | grep -qE '^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?: .+'; then
              echo "⚠️ Warning: Commit message doesn't follow conventional commits format"
              echo "Expected: type(scope): description"
              echo "Got: $msg"
            fi
          done

      - name: Check for large files
        run: |
          echo "Checking for large files (>5MB)..."
          LARGE_FILES=$(find . -type f -size +5M -not -path "./.git/*" -not -path "./.venv/*" -not -path "./node_modules/*")
          if [ -n "$LARGE_FILES" ]; then
            echo "❌ Large files detected:"
            echo "$LARGE_FILES"
            echo "Please use Git LFS for large files or add them to .gitignore"
            exit 1
          fi
          echo "✅ No large files detected"

      - name: Check for TODO/FIXME comments
        run: |
          echo "Checking for TODO/FIXME comments..."
          TODOS=$(grep -r "TODO\|FIXME" --include="*.py" working/ || true)
          if [ -n "$TODOS" ]; then
            echo "ℹ️ Found TODO/FIXME comments:"
            echo "$TODOS"
            echo ""
            echo "Please address these before merging to main"
          fi

      - name: Check Python syntax
        run: |
          python3 -m compileall working/ -q

  # Job 2: Code formatting check
  format-check:
    name: Code Format Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dev dependencies
        run: |
          uv sync --extra dev

      - name: Check Black formatting
        run: |
          source .venv/bin/activate
          black --check working/ tests/
        continue-on-error: false

      - name: Check isort import order
        run: |
          source .venv/bin/activate
          isort --check-only working/ tests/
        continue-on-error: false

      - name: Auto-fix suggestion
        if: failure()
        run: |
          echo "💡 To fix formatting issues automatically, run:"
          echo "  uv run black working/ tests/"
          echo "  uv run isort working/ tests/"

  # Job 3: Static analysis
  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dev dependencies
        run: |
          uv sync --extra dev

      - name: Run flake8
        run: |
          source .venv/bin/activate
          flake8 working/ tests/ \
            --max-line-length=100 \
            --extend-ignore=E203,W503 \
            --count \
            --statistics

  # Job 4: Unit tests (fast)
  fast-tests:
    name: Fast Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install test dependencies
        run: |
          uv sync --extra test

      - name: Run fast unit tests
        run: |
          source .venv/bin/activate
          pytest tests/unit/ \
            -v \
            --maxfail=5 \
            --timeout=10 \
            -m "not slow"
        timeout-minutes: 5

  # Job 5: Security quick scan
  security-quick:
    name: Quick Security Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install bandit
        run: |
          uv pip install bandit[toml]

      - name: Run quick security scan
        run: |
          source .venv/bin/activate
          bandit -r working/ -ll -i
        continue-on-error: true

      - name: Check for hardcoded secrets patterns
        run: |
          echo "Checking for potential secrets..."
          # Check for common secret patterns
          if grep -r -i "password\s*=\s*['\"]" --include="*.py" working/ | grep -v "password.*os.getenv"; then
            echo "⚠️ Warning: Potential hardcoded password detected"
          fi

          if grep -r "api[_-]?key\s*=\s*['\"]" --include="*.py" working/ | grep -v "api_key.*os.getenv"; then
            echo "⚠️ Warning: Potential hardcoded API key detected"
          fi

  # Job 6: Pre-commit summary
  pre-commit-summary:
    name: Pre-commit Summary
    runs-on: ubuntu-latest
    needs: [quick-checks, format-check, static-analysis, fast-tests, security-quick]
    if: always()

    steps:
      - name: Check overall status
        run: |
          echo "## Pre-commit Checks Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Quick Checks | ${{ needs.quick-checks.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Format Check | ${{ needs.format-check.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Static Analysis | ${{ needs.static-analysis.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Fast Tests | ${{ needs.fast-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Quick | ${{ needs.security-quick.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Fail if critical checks failed
          if [[ "${{ needs.format-check.result }}" == "failure" ]] || \
             [[ "${{ needs.static-analysis.result }}" == "failure" ]] || \
             [[ "${{ needs.fast-tests.result }}" == "failure" ]]; then
            echo "❌ Pre-commit checks failed"
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Action Required" >> $GITHUB_STEP_SUMMARY
            echo "Please fix the issues above before merging." >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ All pre-commit checks passed"
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ✅ Ready to Merge" >> $GITHUB_STEP_SUMMARY
            echo "All pre-commit checks passed successfully!" >> $GITHUB_STEP_SUMMARY
          fi
